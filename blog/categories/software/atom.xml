<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: software | ⚔ passcod ⚔]]></title>
  <link href="https://passcod.name/blog/categories/software/atom.xml" rel="self"/>
  <link href="https://passcod.name/"/>
  <updated>2013-02-11T03:35:30+13:00</updated>
  <id>https://passcod.name/</id>
  <author>
    <name><![CDATA[Félix Saparelli]]></name>
    <email><![CDATA[me@passcod.name]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Late introduction to libworker.js]]></title>
    <link href="https://passcod.name/2013/02/07/late-introduction-to-libworker-dot-js.html"/>
    <updated>2013-02-07T22:19:00+13:00</updated>
    <id>https://passcod.name/2013/02/07/late-introduction-to-libworker-dot-js</id>
    <content type="html"><![CDATA[<p>About 3 weeks ago I tried to reboot <a href="https://passcod.name/DynWorker">DynWorker</a>, my library
to “make web threading fun.” I wanted not only to take advantage
of newer technology, but also to give it a good layer of fresh
paint. I started by manually translating it all in CoffeeScript.</p>

<p>And it was looking good! The straight conversion worked, so I made
a tiny change and tried to use a data:URI to load the worker code.
Which turned out to be impossible. I essentially wanted to take the
entire library, stringify it, base64-encode it, and put it in a
variable… preferably at run-time. Y’know, so I didn't have to dupe
my entire code in the source!</p>

<p>One of the best (!) solutions I found went like this:</p>

<p>``` coffeescript JS in Coffee, ah-yup
var src = "
(function () {
  ...
  do something
  ...
}())"</p>

<p>@DynWorker.src = "data:text/javascript;base64," + btoa src
eval src
```</p>

<p><em>Don’t do that, kids.</em></p>

<p>Besides, I had looked at the list of features I had to test, the list
of features I had thought of, the list of features I probably needed
to implement, and daaamn, boy, ah wasn’ gonna be done with it sooner.
So I tanked it.</p>

<p>Instead, I created <a href="https://github.com/passcod/libworker.js">libworker.js</a>. DynWorker has a line in the readme
saying it pretty low-level. That ain’t true no more. Libworker.js is to
DynWorker what Assembly is to C++ : a completely different level.</p>

<p>Here is the entirety of the source. You can take that and paste
it in your console and it’ll work. Promise.</p>

<p><code>javascript libworker.min.js
(function(b){
"use strict";
b.addEventListener("message",function(a){a=String(a.data);
if(!(5&gt;a.length)&amp;&amp;"eval:"===a.slice(0,5))return b.eval.call(b,
a.slice(5))});function c(a){this.metal=null!=a?a:new Worker(c.src)}
c.prototype.send=function(a){this.metal.postMessage(a)};
c.prototype.eval=function(a){this.send("eval:"+a)};
c.src='data:text/javascript;base64,dmFyIGI7Yj10aGlzO'+
'3RoaXMuYWRkRXZlbnRMaXN0ZW5lcigibWVzc2FnZSIsZnVuY3Rp'+
'b24oYSl7YT1TdHJpbmcoYS5kYXRhKTtpZighKDU+YS5sZW5ndGg'+
'pJiYiZXZhbDoiPT09YS5zbGljZSgwLDUpKXJldHVybiBiLmV2YW'+
'wuY2FsbChiLGEuc2xpY2UoNSkpfSk7';
b.libworker=c;
}(this));
</code></p>

<p>(It’s actually <a href="https://github.com/passcod/libworker.js/blob/master/libworker.coffee">written in CoffeeScript</a>, don’t you worry, this
is not the source source, it’s not completely unmantainable. Although
I actually “hand-compile” this thing.)</p>

<p>If you can’t read minified JavaScript, there’s <a href="https://passcod.name/libworker.js">a page with examples</a>
available, albeit quite short. I just can’t justify too many words on this
little code!</p>

<p>This library can be included directly in any project that needs to use
WebWorkers, like <strong>Dyno.js</strong>, my upcoming Actor framework for browsers,
for which there is little source available in very non-obvious places.<br/>
You’ll just have to wait ;-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On the sides, really really alpha]]></title>
    <link href="https://passcod.name/2013/01/25/on-the-sides.html"/>
    <updated>2013-01-25T15:31:00+13:00</updated>
    <id>https://passcod.name/2013/01/25/on-the-sides</id>
    <content type="html"><![CDATA[<p>So, <a href="/2013/01/04/on-ifttt-not-having-an-api-and-on-dot-thesides-v1.html">IFTTT sucks</a>. Turns out there's a better IFTTT out there
called <a href="https://zapier.com/">Zapier</a> that has a really easy to use developer interface.
Hence, I created a Zapier service for <strong>On the sides</strong>. Due to my own
UI not being great, though, you'll have to fiddle around with cURL (or
better, <a href="http://httpie.org/">httpie</a>, which is what I'll be using below) to make it all
work.</p>

<h2>Pre-reqs</h2>

<ul>
<li><p>You'll need a Zapier account. This takes about 20 seconds to create, email
verification isn't even necessary, and they've got a decent free plan.</p></li>
<li><p>You'll need to log in to <a href="https://login.persona.org/">Mozilla Persona</a>. You can actually do that
later on when signing in to <strong>On the sides</strong>, but if emails take a bit of
time to arrive you might want to do it now if you have never done it before.
If you're just playing around, use <code>some-word@mockmyid.com</code> instead when
doing the Mozilla Persona thing (but only there!).</p></li>
<li><p>You'll need something to consume HTTP APIs with ease. I'll use httpie, as
mentioned above, or you can use cURL, or a JS console with jQuery.ajax or
anything else that floats your boat. Whatever. It needs to be able to do
GET and POST (with PUT and DELETE as bonuses), and set custom headers.</p></li>
<li><p>You'll need to know how to open the JS console. I won't tell you how, just
figure it out and if you can't, well, you probably can't do the rest anyway.</p></li>
<li><p>You'll need about 15 minutes. More if you're slow. Less if you're da baws.</p></li>
</ul>


<!-- more -->


<h2>On the sides AUTH</h2>

<ol>
<li><p>Go to http://box.thesid.es and press the “Login” button. Or the “Start” button.
They do the same thing. If you can't see anything but a jumble of weird text,
click everywhere and you'll eventually hit it.</p></li>
<li><p>The Persona Login window will open. Follow the intructions.</p></li>
<li><p>If successful, you should be left with quite a bit less text. Open a JS console
or Firebug or whatever and enter:</p></li>
</ol>


<p>  ``` javascript ~Console~</p>

<blockquote><blockquote><blockquote><p>localStorage.session
  ```</p></blockquote></blockquote></blockquote>

<ol>
<li>You should now have your session token. Open a terminal, and run this:</li>
</ol>


<p>  <code>bash ~Terminal~
  $ export SESS=paste-your-session-token-here
 </code></p>

<p>That will perform the double function of letting you easily access it for cURL or
httpie and save it somewhere easy to access for future steps.</p>

<h2>Create a job</h2>

<ol>
<li><p>Create a JS script to run on <strong>on the sides</strong>. Make it available somewhere
on the web, like in a <a href="https://gist.github.com">Gist</a> or at some pastebin or in a text file on your
server. It needs to be plain (not in an HTML thingimabob) and accessible with
a simple GET. Redirection (301,302) is ok. You can use <a href="https://gist.github.com/raw/4516319">this example script</a>
to start with or if you're lazy.</p></li>
<li><p>Register the job:</p></li>
</ol>


<p>  <code>bash ~Terminal~
  $ http --form POST http://api.box.thesid.es/job/new X-Session:$SESS script="http://example.com/script.js"
 </code></p>

<ol>
<li>That should give a nice 200 with something like this:</li>
</ol>


<p>  ``` json ~Response~</p>

<pre><code>{
  "created_at": "2013/01/08 15:03:47 +0000",
  "description": "",
  "hit_url": "",
  "id": "712fd8ff8e294ccae40b25a71e68593e",
  "key": "9a741e29cf49fa3a91a53e2c44de6b1c94048206",
  "script": "http://example.com/script.js"
}
</code></pre>

<p>  ```</p>

<h2>Zapier action</h2>

<ol>
<li><p>Log in to Zapier. Ask me to send you the invite email so you can access
the <strong>On the sides</strong> service.</p></li>
<li><p>Press the ‘Create a New Zap’ button.</p></li>
<li><p>Select a trigger (personally I find that GTalk is a good try/debug trigger).</p></li>
<li><p>Search for “on” and drag “On the sides” to the action box.</p></li>
<li><p>You'll need to “Add your On the sides Account”. This requires a <code>session</code>
and <code>key</code> field. The <code>session</code> one is the value stored in <code>$SESS</code> above. The
<code>key</code> one is the one from the JSON you got when creating a job. You can also
get it back using:</p></li>
</ol>


<p>  <code>bash ~Terminal~
  $ http GET api.box.thesid.es/me X-Session:$SESS
 </code></p>

<ol>
<li>At the next step, you'll need the “Job ID”, which you got when creating the job
above, and can also get back using:</li>
</ol>


<p>  <code>bash ~Terminal~
  $ http GET api.box.thesid.es/jobs X-Session:$SESS
 </code></p>

<ol>
<li>Skip the rest and just Enable the Zap at the bottom of the page.</li>
</ol>


<h2>Zapier trigger</h2>

<ol>
<li><p>Create a New Zap again.</p></li>
<li><p>Select an action. Something like GTalk works.</p></li>
<li><p>Select <strong>On the sides</strong> as trigger.</p></li>
<li><p>You'll need to enter the same Job ID as before.</p></li>
<li><p>If you're using GTalk as action, you'll probably want to set the message to
something like:</p></li>
</ol>


<p>  <code>plain Message
  Job  has finished.
 </code></p>

<ol>
<li>Enable it.</li>
</ol>


<h2>Test it!</h2>

<p>(Hopefully I haven't forgotten anything and it works.)</p>

<p>Now you can trigger the job (using GTalk: just send a message to the zapbot).
When the job finishes, your action will be called (using GTalk: you'll receive
a message). Currently there's no way to give data to a job nor get data back
from it automatically, but it should be a good demo.</p>

<h2>Play around</h2>

<p>Get out in the sun once in a while, though.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On IFTTT not having an HTTP ‘this’ nor ‘that’]]></title>
    <link href="https://passcod.name/2013/01/04/on-ifttt-not-having-an-api-and-on-dot-thesides-v1.html"/>
    <updated>2013-01-04T18:20:00+13:00</updated>
    <id>https://passcod.name/2013/01/04/on-ifttt-not-having-an-api-and-on-dot-thesides-v1</id>
    <content type="html"><![CDATA[<p>So, <a href="https://ifttt.com">IFTTT</a> is cool. It's a nitfy little service that glues various
services together, pipe-style, and makes the realtime web just that
much more useful. Only, I thought they'd have the decency of including
HTTP triggers and channels so we could do whatever we damn well wanted
instead of being stuck with the handful of services we're actually using.</p>

<p>So I need something to:</p>

<ul>
<li>Trigger an IFTTT recipe,</li>
<li>get triggered by a recipe,</li>
<li>and be able to send and receive arbitrary data through that.</li>
</ul>


<p>My first thought was: let's create a service that translates HTTP calls
to something IFTTT can handle and vice-versa. Woo! Boo! Not so easy.
Here are a few options:</p>

<h2>Email</h2>

<p>Possibly the easiest one to work with, albeit with a few serious caveats.
You can send emails to trigger@ifttt.com and it can also send you emails
as actions. The data is free-form and not really length-limited, and you
can even send a file through for binary data support.</p>

<p>Unfortunately, IFTTT only supports a single email channel per account, so
that means you'd have to give up on the email channel for other purposes.
(This ain't so bad: you could always plug the HTTP calls into a 3rd-party
email service.)</p>

<h2>Feed</h2>

<p><em>Trigger only</em></p>

<p>Probably the best solution for triggers, this has the same advantages as email
minus the file attachment, but with better-structured data (more fields).</p>

<h2>Gmail</h2>

<p>Like email, but a bit better. Notably, you can send an email from your Gmail
account as an action, and trigger a recipe when a new email arrives, optionally
tagged. This could be a bit nicer as it allows you to still use both Email and
Gmail as channels. However, if you've got a Gmail account linked to IFTTT, there's
no reason to use Email at all except for proxying things through as shown above.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bullets dump for Imaku]]></title>
    <link href="https://passcod.name/2012/12/16/bullets-dump-for-imaku.html"/>
    <updated>2012-12-16T22:11:00+13:00</updated>
    <id>https://passcod.name/2012/12/16/bullets-dump-for-imaku</id>
    <content type="html"><![CDATA[<ul>
<li>White to be the dominant colour, not black as in every other thing out there.</li>
<li>Simple design, flat feel. Most others try to bring depth, but maybe trying too hard…</li>
<li>Icon grid is overrated. Text is nice too.</li>
<li>For non-phone devices (desktops / laptop / tablets / hybrids), the keyboard is accessible:

<ul>
<li>Alfred / Gnome3 -style type to search and launch</li>
<li>Maybe bring back Ubiquity principles?</li>
</ul>
</li>
<li>Modifiers for touch screens:

<ul>
<li>Hold one corner == Control / Alt / Super keys</li>
</ul>
</li>
<li>Use touchpads fully: gestures, etc – not just left/right click simulation</li>
<li>Forget the past:

<ul>
<li>DON'T BE BACKWARD COMPATIBLE !!!</li>
<li>Menu bar? Pfff.</li>
<li>Docks? No need.</li>
<li>Window decorations? Nope: can use modifier keys to manipulate windows (resize, move) and gestures / hotkeys to close them.</li>
</ul>
</li>
<li>But learn from it:

<ul>
<li>DON'T FORGET POWER USERS !!!</li>
<li>Ease of manipulating windows in bulk (tiling, layouts)</li>
<li>Settings, options, customisability.</li>
<li>In fact, educate users through "forced-learning" (like what is used in games, e.g. Meat Boy) so everyone's a power user.</li>
<li>Forget apps: applications are programs, we should make them simpler, not dumb.</li>
<li>PIPES !!! Pipes in Unix are the best thing ever, why couldn't we have something similar?</li>
</ul>
</li>
<li>Rich command line, like Firefox's Dev Tools and Ace's control line

<ul>
<li>Make it an integral part of the system, not just something for geeks</li>
</ul>
</li>
<li>Infinite desktop space:

<ul>
<li>No separate desktops / workspaces</li>
<li>The screen is a viewport onto the virtual desktop area.</li>
<li>Can save viewpoints to have quick-access</li>
<li>Base operation is 2D-only, but can lapse into the Z if user can handle the additional cognitive load ;)</li>
<li>Can do the usual, and pin windows to viewport</li>
<li>Super-advanced features:

<ul>
<li>Multiple screens have multiple viewports</li>
<li>Can connect different user spaces in one large canvas</li>
<li>A bit like multi-player tmux but for the desktop / GUI</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Plong: A pseudo-peer-to-peer WebSocket solution]]></title>
    <link href="https://passcod.name/2012/12/04/introducing-plong-a-pseudo-peer-to-peer-websocket-solution.html"/>
    <updated>2012-12-04T21:08:00+13:00</updated>
    <id>https://passcod.name/2012/12/04/introducing-plong-a-pseudo-peer-to-peer-websocket-solution</id>
    <content type="html"><![CDATA[<p>My latest open source project is <a href="//plong.me">Plong.me</a>, a zero-setup
file transfer app. I say file <em>transfer</em> and not file <em>sharing</em> because
no data is ever stored in "the cloud" or on a computer other than the ones
it is transfered between.</p>

<p>I wanted this to be zero-setup and require no download, no installation, no
sign up, no plugins, no nothing. Just a modern browser. I also wanted it to
be secure (read: end-to-end encryption) yet easy enough for anyone to use.
Daunting task.</p>

<p>This called for a peer-to-peer protocol, but the other requirements meant it
had to be a web p2p protocol available right now in browsers. This doesn't
exist yet. <a href="http://dev.w3.org/2011/webrtc/editor/webrtc.html#peer-to-peer-data-api">WebRTC</a>
is getting there, but this part of it isn't implemented anywhere yet. I therefore
had to make my own.</p>

<!--more-->


<p>Thus, <em>Plong</em>'s backend is a scalable web and websocket server written in Go,
which provides the infrastructure required to have pseudo-peer-to-peer connections
over WebSockets. The protocol is not too complex but certainly too long to describe
here, so I'll point you to <a href="https://github.com/passcod/plong-server">its repository</a>.</p>

<p><em>Plong Server</em> is actually generic enough to enable anyone to create a peer-to-peer
application in the browser. After the initial negotiation with the server, all data
passed over the connection passes through the server directly to the remote peer,
with the usual caveats of a normal socket (if the peer ain't listening, the data
will be lost – there's no queueing or anything).</p>

<p>This is something that's already done by a lot of webgames out there… but these
usually rely on a game-specific Node.js backend, which ensures communication on top
of all other duties. With <em>Plong</em>, the server does nothing beyond data passthru,
which means you can create fully client-side applications. To me, this means a much
reduced load on the server. It can also mean simpler architecture, or less privacy
headaches. Your pick.</p>

<p>This isn't perfect. I consider the software stable as of version 1.0.1, but the
protocol and implementation details were thought up mostly on the spot. It might
have weird breakage and it might not be too efficient. Early stuff! :)</p>
]]></content>
  </entry>
  
</feed>
