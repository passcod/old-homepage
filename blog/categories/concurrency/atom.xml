<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: concurrency | ⚔ passcod ⚔]]></title>
  <link href="https://passcod.name/blog/categories/concurrency/atom.xml" rel="self"/>
  <link href="https://passcod.name/"/>
  <updated>2013-02-16T22:11:54+13:00</updated>
  <id>https://passcod.name/</id>
  <author>
    <name><![CDATA[Félix Saparelli]]></name>
    <email><![CDATA[me@passcod.name]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Late introduction to libworker.js]]></title>
    <link href="https://passcod.name/2013/02/07/late-introduction-to-libworker-dot-js.html"/>
    <updated>2013-02-07T22:19:00+13:00</updated>
    <id>https://passcod.name/2013/02/07/late-introduction-to-libworker-dot-js</id>
    <content type="html"><![CDATA[<p>About 3 weeks ago I tried to reboot <a href="https://passcod.name/DynWorker">DynWorker</a>, my library
to “make web threading fun.” I wanted not only to take advantage
of newer technology, but also to give it a good layer of fresh
paint. I started by manually translating it all in CoffeeScript.</p>

<p>And it was looking good! The straight conversion worked, so I made
a tiny change and tried to use a data:URI to load the worker code.
Which turned out to be impossible. I essentially wanted to take the
entire library, stringify it, base64-encode it, and put it in a
variable… preferably at run-time. Y’know, so I didn't have to dupe
my entire code in the source!</p>

<p>One of the best (!) solutions I found went like this:</p>

<p>``` coffeescript JS in Coffee, ah-yup
var src = "
(function () {
  ...
  do something
  ...
}())"</p>

<p>@DynWorker.src = "data:text/javascript;base64," + btoa src
eval src
```</p>

<p><em>Don’t do that, kids.</em></p>

<p>Besides, I had looked at the list of features I had to test, the list
of features I had thought of, the list of features I probably needed
to implement, and daaamn, boy, ah wasn’ gonna be done with it sooner.
So I tanked it.</p>

<p>Instead, I created <a href="https://github.com/passcod/libworker.js">libworker.js</a>. DynWorker has a line in the readme
saying it pretty low-level. That ain’t true no more. Libworker.js is to
DynWorker what Assembly is to C++ : a completely different level.</p>

<p>Here is the entirety of the source. You can take that and paste
it in your console and it’ll work. Promise.</p>

<p><code>javascript libworker.min.js
(function(b){
"use strict";
b.addEventListener("message",function(a){a=String(a.data);
if(!(5&gt;a.length)&amp;&amp;"eval:"===a.slice(0,5))return b.eval.call(b,
a.slice(5))});function c(a){this.metal=null!=a?a:new Worker(c.src)}
c.prototype.send=function(a){this.metal.postMessage(a)};
c.prototype.eval=function(a){this.send("eval:"+a)};
c.src='data:text/javascript;base64,dmFyIGI7Yj10aGlzO'+
'3RoaXMuYWRkRXZlbnRMaXN0ZW5lcigibWVzc2FnZSIsZnVuY3Rp'+
'b24oYSl7YT1TdHJpbmcoYS5kYXRhKTtpZighKDU+YS5sZW5ndGg'+
'pJiYiZXZhbDoiPT09YS5zbGljZSgwLDUpKXJldHVybiBiLmV2YW'+
'wuY2FsbChiLGEuc2xpY2UoNSkpfSk7';
b.libworker=c;
}(this));
</code></p>

<p>(It’s actually <a href="https://github.com/passcod/libworker.js/blob/master/libworker.coffee">written in CoffeeScript</a>, don’t you worry, this
is not the source source, it’s not completely unmantainable. Although
I actually “hand-compile” this thing.)</p>

<p>If you can’t read minified JavaScript, there’s <a href="https://passcod.name/libworker.js">a page with examples</a>
available, albeit quite short. I just can’t justify too many words on this
little code!</p>

<p>This library can be included directly in any project that needs to use
WebWorkers, like <strong>Dyno.js</strong>, my upcoming Actor framework for browsers,
for which there is little source available in very non-obvious places.<br/>
You’ll just have to wait ;-)</p>
]]></content>
  </entry>
  
</feed>
