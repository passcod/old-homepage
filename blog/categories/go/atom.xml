<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: go | ⚔ passcod ⚔]]></title>
  <link href="https://passcod.name/blog/categories/go/atom.xml" rel="self"/>
  <link href="https://passcod.name/"/>
  <updated>2013-02-09T19:40:41+13:00</updated>
  <id>https://passcod.name/</id>
  <author>
    <name><![CDATA[Félix Saparelli]]></name>
    <email><![CDATA[me@passcod.name]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[On IFTTT not having an HTTP ‘this’ nor ‘that’]]></title>
    <link href="https://passcod.name/2013/01/04/on-ifttt-not-having-an-api-and-on-dot-thesides-v1.html"/>
    <updated>2013-01-04T18:20:00+13:00</updated>
    <id>https://passcod.name/2013/01/04/on-ifttt-not-having-an-api-and-on-dot-thesides-v1</id>
    <content type="html"><![CDATA[<p>So, <a href="https://ifttt.com">IFTTT</a> is cool. It's a nitfy little service that glues various
services together, pipe-style, and makes the realtime web just that
much more useful. Only, I thought they'd have the decency of including
HTTP triggers and channels so we could do whatever we damn well wanted
instead of being stuck with the handful of services we're actually using.</p>

<p>So I need something to:</p>

<ul>
<li>Trigger an IFTTT recipe,</li>
<li>get triggered by a recipe,</li>
<li>and be able to send and receive arbitrary data through that.</li>
</ul>


<p>My first thought was: let's create a service that translates HTTP calls
to something IFTTT can handle and vice-versa. Woo! Boo! Not so easy.
Here are a few options:</p>

<h2>Email</h2>

<p>Possibly the easiest one to work with, albeit with a few serious caveats.
You can send emails to trigger@ifttt.com and it can also send you emails
as actions. The data is free-form and not really length-limited, and you
can even send a file through for binary data support.</p>

<p>Unfortunately, IFTTT only supports a single email channel per account, so
that means you'd have to give up on the email channel for other purposes.
(This ain't so bad: you could always plug the HTTP calls into a 3rd-party
email service.)</p>

<h2>Feed</h2>

<p><em>Trigger only</em></p>

<p>Probably the best solution for triggers, this has the same advantages as email
minus the file attachment, but with better-structured data (more fields).</p>

<h2>Gmail</h2>

<p>Like email, but a bit better. Notably, you can send an email from your Gmail
account as an action, and trigger a recipe when a new email arrives, optionally
tagged. This could be a bit nicer as it allows you to still use both Email and
Gmail as channels. However, if you've got a Gmail account linked to IFTTT, there's
no reason to use Email at all except for proxying things through as shown above.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Plong: A pseudo-peer-to-peer WebSocket solution]]></title>
    <link href="https://passcod.name/2012/12/04/introducing-plong-a-pseudo-peer-to-peer-websocket-solution.html"/>
    <updated>2012-12-04T21:08:00+13:00</updated>
    <id>https://passcod.name/2012/12/04/introducing-plong-a-pseudo-peer-to-peer-websocket-solution</id>
    <content type="html"><![CDATA[<p>My latest open source project is <a href="//plong.me">Plong.me</a>, a zero-setup
file transfer app. I say file <em>transfer</em> and not file <em>sharing</em> because
no data is ever stored in "the cloud" or on a computer other than the ones
it is transfered between.</p>

<p>I wanted this to be zero-setup and require no download, no installation, no
sign up, no plugins, no nothing. Just a modern browser. I also wanted it to
be secure (read: end-to-end encryption) yet easy enough for anyone to use.
Daunting task.</p>

<p>This called for a peer-to-peer protocol, but the other requirements meant it
had to be a web p2p protocol available right now in browsers. This doesn't
exist yet. <a href="http://dev.w3.org/2011/webrtc/editor/webrtc.html#peer-to-peer-data-api">WebRTC</a>
is getting there, but this part of it isn't implemented anywhere yet. I therefore
had to make my own.</p>

<!--more-->


<p>Thus, <em>Plong</em>'s backend is a scalable web and websocket server written in Go,
which provides the infrastructure required to have pseudo-peer-to-peer connections
over WebSockets. The protocol is not too complex but certainly too long to describe
here, so I'll point you to <a href="https://github.com/passcod/plong-server">its repository</a>.</p>

<p><em>Plong Server</em> is actually generic enough to enable anyone to create a peer-to-peer
application in the browser. After the initial negotiation with the server, all data
passed over the connection passes through the server directly to the remote peer,
with the usual caveats of a normal socket (if the peer ain't listening, the data
will be lost – there's no queueing or anything).</p>

<p>This is something that's already done by a lot of webgames out there… but these
usually rely on a game-specific Node.js backend, which ensures communication on top
of all other duties. With <em>Plong</em>, the server does nothing beyond data passthru,
which means you can create fully client-side applications. To me, this means a much
reduced load on the server. It can also mean simpler architecture, or less privacy
headaches. Your pick.</p>

<p>This isn't perfect. I consider the software stable as of version 1.0.1, but the
protocol and implementation details were thought up mostly on the spot. It might
have weird breakage and it might not be too efficient. Early stuff! :)</p>
]]></content>
  </entry>
  
</feed>
