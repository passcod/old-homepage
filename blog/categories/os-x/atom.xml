<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: OS X | ⚔ passcod ⚔]]></title>
  <link href="https://passcod.name/blog/categories/os-x/atom.xml" rel="self"/>
  <link href="https://passcod.name/"/>
  <updated>2013-02-16T22:15:21+13:00</updated>
  <id>https://passcod.name/</id>
  <author>
    <name><![CDATA[Félix Saparelli]]></name>
    <email><![CDATA[me@passcod.name]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building Hotot]]></title>
    <link href="https://passcod.name/2013/02/16/building-hotot.html"/>
    <updated>2013-02-16T02:33:00+13:00</updated>
    <id>https://passcod.name/2013/02/16/building-hotot</id>
    <content type="html"><![CDATA[<p>A few days ago <strong>@codeofinterest</strong> <a href="https://twitter.com/codeofinterest/status/301268509709705217">tweeted about Hotot</a>, enthused
about a “better [alternative] than TweetDeck.” I was intrigued. Hotot has
<a href="http://www.ghacks.net/2011/03/28/hotot-give-this-new-linux-twitter-client-a-tweet/">an article on ghacks</a>, <a href="https://github.com/lyricat/Hotot">a GitHub repository</a>, and a <em>defunct</em>
<a href="http://hotot.org">website</a> (it answers systematically with a 502). And of course, all the
information and downloads and demos / screens are purportedly on there.
Hidden. Frustrating.</p>

<p>Not content with the <a href="https://chrome.google.com/webstore/detail/hotot/cnfkkfleeiooolklkgkmigodkmcopnji?hl=en">Chrome extension</a> (the only other time I ran Chrome
solely for the purpose of a single application was TweetDeck, and I will not
repeat that experience), I decided to build the software. How hard could it be?</p>

<p><em>(Do not follow these instructions unless you know what you’re doing. There’s a
<a href="https://gist.github.com/passcod/4966034">Homebrew formula</a> at the end which can be used for a far easier and better
install.)</em></p>

<!-- more -->


<h2>Gtk2</h2>

<p>Firstly, I had a choice to make: Gtk2, Gtk3, or Qt as a wrapper? I chose Gtk2.
It seemed the easiest option. The README indicates the following dependencies
for Gtk2:</p>

<ul>
<li><strong>python2</strong>: Easy, there’s one bundled with OS X, if I recall, although I
have the Homebrew version myself.</li>
<li><strong>pygtk</strong>: That one can be installed through <code>brew</code>. It builds cleanly.</li>
<li><strong>python-webkit</strong>: This was the first snag I hit. <code>pip</code> finds <code>pywebkitgtk</code>,
but doesn’t even attempt to install it due to a missing <code>setup.py</code>. It has
to be built manually.</li>
</ul>


<p>PyWebkitGtk has an <code>INSTALL</code> file which is rather verbose, but boils down to
the usual <code>./configure</code>, <code>make</code>, <code>make install</code>. Immediately, <code>./configure</code>
stopped to ask me about missing dependencies:</p>

<ul>
<li><strong>gstreamer</strong>: Homebrew took care of that nicely.</li>
<li><strong>pygtk</strong>: Which the previous step took care of.</li>
<li><strong>gthread</strong>: Which is found in glib, which I do have installed (Homebrew).</li>
<li><strong>libxslt</strong>: Which is included with OS X. Huh. It’s complaining quite
specifically about this one. Why?</li>
</ul>


<p>I tried to install it through <code>brew install libxslt</code>, but Homebrew warned me it
was keg-only, and that linking it <em>would</em> cause problems. Stuck, I nevertheless
tried to, then ran <code>./configure</code> again, and when it still didn’t work, I ran a
<code>brew unlink libxslt</code> to avoid trouble. I had a problem though: all the deps
were there, but the configure script didn’t want to work. I suspected it was a
path problem, though. So I tried various ways of specifying paths. <em>(In this
situation, my old trick of using nested shells to preserve the original env and
revert explorations quickly paid off immensely. I’d forgotten it for a while,
moslty due to <code>tmux</code> and <code>popd</code>, but it’s quite cool.)</em> In the end, here’s what
I believed would work:</p>

<p>``` bash
export PYGTK_CFLAGS="-I/usr/local/Cellar/pygtk/2.24.0/include/pygtk-2.0"
export PYGTK_CFLAGS="$PYTHON_CFLAGS -I/usr/local/Cellar/pygobject/2.28.6/include/pygtk-2.0"</p>

<p>export PKG_CONFIG_PATH="/usr/local/Cellar/gstreamer/0.10.36/lib/pkgconfig"
export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:/usr/local/Cellar/pygobject/2.28.6/lib/pkgconfig"
export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:/usr/local/Cellar/pygtk/2.24.0/lib/pkgconfig"
export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:/usr/local/Cellar/libxslt/1.1.28/lib/pkgconfig"</p>

<p>export PATH="$PATH:/usr/local/Cellar/gettext/0.18.2/bin/"</p>

<p>./configure --prefix=/usr/local/Cellar/pywebkitgtk/HEAD
```</p>

<p>Unfortunately, it died with this unhelful error:</p>

<p>``` text
checking for DEPS... no
configure: error: Package requirements (libxslt</p>

<pre><code>              gthread-2.0
              pygtk-2.0) were not met:
</code></pre>

<p>Consider adjusting the PKG_CONFIG_PATH environment variable if you
installed software in a non-standard prefix.</p>

<p>Alternatively, you may set the environment variables DEPS_CFLAGS
and DEPS_LIBS to avoid the need to call pkg-config.
See the pkg-config man page for more details.
```</p>

<p>That blank space should have details, such as which package is missing,
exactly, but it’s emptiness here it really frustrating. However, it also brings
a new, slightly more tedious, line of trials: setting <code>DEPS_*</code> directly and
bypassing pkg-config altogether. But before I tried that, I decided to give one
of the other wrappers a chance.</p>

<h2>Qt</h2>

<p>Qt 4.8 is in Homebrew and I already had it installed, so I went on to try and
build Hotot. The instructions are:</p>

<p><code>bash
$ git clone git://github.com/lyricat/Hotot
$ cd Hotot
$ mkcd build
$ cmake ..
$ make
$ sudo make install
</code></p>

<p>Cmake complained that it couldn’t find gettext, though, so I ran
<code>brew link gettext --force</code> before building, with the intention of unlinking
afterwards. That worked.</p>

<p>As my system is configured using Homebrew, there is no need to run
<code>make install</code> as root. Build and installation having proceeded without snag,
I unlinked gettext and went on to the next step: trying it out.</p>

<p><code>bash
$ hotot-qt
</code></p>

<p>Easy does it…</p>

<p><img src="/images/blog/2013-02-16-hotot-icon.png" alt="Pretty icon for Hotot" /></p>

<p><img src="/images/blog/2013-02-16-hotot-first-screen.png" alt="OK, it seems to be alright…" /></p>

<p><img src="/images/blog/2013-02-16-hotot-logged-in.png" alt="Logged in and ready to go!" /></p>

<p>Here’s a Gist with a working <a href="https://gist.github.com/passcod/4966034">Homebrew formula for Hotot</a>.</p>
]]></content>
  </entry>
  
</feed>
