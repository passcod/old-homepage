<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: gist | ⚔ passcod ⚔]]></title>
  <link href="https://passcod.name/blog/categories/gist/atom.xml" rel="self"/>
  <link href="https://passcod.name/"/>
  <updated>2013-05-28T18:38:44+12:00</updated>
  <id>https://passcod.name/</id>
  <author>
    <name><![CDATA[Félix Saparelli]]></name>
    <email><![CDATA[me@passcod.name]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The 80/20 Rule]]></title>
    <link href="https://passcod.name/2012/07/25/the-80-slash-20-rule.html"/>
    <updated>2012-07-25T07:14:00+12:00</updated>
    <id>https://passcod.name/2012/07/25/the-80-slash-20-rule</id>
    <content type="html"><![CDATA[<p><em>Original on <a href="http://gist.io/3170138">Gist.IO</a></em></p>

<blockquote><p>I've been saying that to friends, family, and colleagues for a while now,
and I think maybe I should just write it down and refer to it instead of
rehashing it every time. In the last few dozen explanations, it hasn't
actually changed, so I think it's pretty stable. Of course, the community
will have something to say, and that's expected!</p></blockquote>

<p>There are more or less seven states to a new (software) project:</p>

<ol>
<li><strong>Figment</strong>. That's when it's just an idea, and maybe you've written
something down on a paper napkin, or discussed it over coffee with a friend.</li>
<li><strong>Planning</strong>. You're actually putting more thought into it, doing the initial
research, hopefully consolidating the idea into something manageable.</li>
<li><strong>Prototype</strong>. Not necessarily code. Sometimes a prototype can just be rectangles
of paper under magnets on a whiteboard, and a few arrows here and there to represent
dynamics. Also known (in the case of code) as <strong>pre-alpha</strong>.</li>
<li><strong>Alpha</strong>. Finally! Code. You've probably pulled a directory structure out of thin air
and the code doesn't actually do anything remotely productive yet.</li>
<li><strong>Beta</strong>. The project has most of its original main features completed, even though
there's still a lot of bugs. You've taken features out of the codebase and told yourself
you'll implement them later.</li>
<li><strong>Stable</strong>. The project has gotten enough XP and evolves into a product. There's still
bugs and quirks, but the main features are there and you can finally release it to the
wider public (although if you're open-source, this is more likely to happen on 4 or 5).</li>
<li><strong>Future</strong>. This is rumored to be the hardest part of the journey. This has two parts:
provide support for the now-released product, and continue development on new &amp; more
advanced features.</li>
</ol>


<p>These are general states. You might find that 1-3 can be collapsed, or that there's a bunch
of extras in-between 6 and 7. You might also not agree on some of the descriptions I've given.
That's fine. What's important is the actual rule:</p>

<h3>When going from one state to the other, there is an 80% loss rate.</h3>

<p>In other words, for every 1000 things I've thought of, 200 got to be planned, 40 were prototyped,
8 made it to alpha, and 1.6 got to beta. I've had exactly one project reach state 7, and it's discontinued.</p>
]]></content>
  </entry>
  
</feed>
