<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: philosophy | ⚔ passcod ⚔]]></title>
  <link href="http://passcod.net/blog/categories/philosophy/atom.xml" rel="self"/>
  <link href="http://passcod.net/"/>
  <updated>2013-01-25T16:35:10+13:00</updated>
  <id>http://passcod.net/</id>
  <author>
    <name><![CDATA[Félix Saparelli]]></name>
    <email><![CDATA[me@passcod.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My Expectations as a Developer]]></title>
    <link href="http://passcod.net/2013/03/01/my-expectations-as-a-developer.html"/>
    <updated>2013-03-01T01:03:00+13:00</updated>
    <id>http://passcod.net/2013/03/01/my-expectations-as-a-developer</id>
    <content type="html"><![CDATA[<p>A part of my personal philosophy, a guiding principle of sorts,
if you will, is “don’t expect anything (thus anything good that
happens is bonus).” This is a perfectly good and valid principle,
and I have to say it feels pretty sweet— until you realise life
is better <em>with</em> expectations.</p>

<p>My expectations as a working man come to two simple things: get
paid enough to live comfortably, and not have dicks as bosses.
Fortunately, this tends to be pretty easy to find. My expectations
as a developer are quite a lot more thorough. My expectations as
a working developer must therefore be both of these, and maybe a
little more.</p>

<ul>
<li><p>I expect to see your tech stack, and I expect you to be truthful
about it. “Ruby” is not enough of a description. Do you mean RoR
or an alternative full-stack framework or a micro-framework or a
custom-coded, no frameworks-involved, thing? Similarly, saying
you use “Language X and Framework Y version Z” when in fact 90%
of your code is years-old-pasted-together-badly-architectured and
the other 10% is a partial migration to Y v.Z, and my job will
in fact be to help you maintain the whole and maybe convert it
later on… which brings me to my next point:</p></li>
<li><p>I expect you to tell me what I’m going to do and stick to it.
If you hire me as a developer I expect to work as a developer,
not as an “IT guy,” and I certainly do not expect to have to
repair your crapware or set up firewall rules to prevent other
employees from looking at Facebook during work. On the other
hand, if I start behaving more like a sysadmin while I should
be coding, tell me off. I’ll thank you in the long run.</p></li>
<li><p>Finally, and this might be me being pedantic: <em>if you use four
exclamation marks I’m going to laugh at you and move on</em>. There’s
various levels of irritation I get into due to poor typography
and copy, and it might seem puny, but it says something about
you and without your other redeeming features on display I will
judge you harshly. I do <em>not</em> expect you to know the difference
between <a href="https://dash.passcod.net">an en dash and an em dash</a>, and using <a href="http://www.typographyforlawyers.com/?page_id=1701">double-hyphens
instead</a> can be understandable, as well as <a href="https://twitter.com/LeaVerou/status/291333834904055809">curly quotes</a>,
but misplace an apostrophe and you’re in for trouble.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Having the Source lets one remake and derive]]></title>
    <link href="http://passcod.net/2013/01/06/having-the-source-lets-one-remake-and-derive.html"/>
    <updated>2013-01-06T18:13:00+13:00</updated>
    <id>http://passcod.net/2013/01/06/having-the-source-lets-one-remake-and-derive</id>
    <content type="html"><![CDATA[<p>I've been reading articles by <a href="http://yudkowsky.net/">Eliezer Yudkowsky</a> recently, and here's
one that struck me could also refer to open-source software:</p>

<blockquote><p><a href="http://yudkowsky.net/rational/the-simple-truth">A shepherd builds a counting system</a> that works by throwing a pebble
into a bucket whenever a sheep leaves the fold, and taking a pebble
out whenever a sheep returns.  If you, the apprentice, do not understand
this system—if it is magic that works for no apparent reason—then
you will not know what to do if you accidentally drop an extra pebble
into the bucket.  That which you cannot make yourself, you cannot
remake when the situation calls for it.  You cannot go back to the
source, tweak one of the parameter settings, and regenerate the output,
without the source.  If "Two plus four equals six" is a brute fact unto
you, and then one of the elements changes to "five", how are you to
know that "two plus five equals seven" when you were simply told that
"two plus four equals six"?</p>

<p>If you see a small plant that drops a seed whenever a bird passes it,
it will not occur to you that you can use this plant to partially
automate the sheep-counter.  Though you learned something that the
original maker would use to improve on his invention, you can't go back
to the source and re-create it.</p>

<p><em>(from <a href="http://lesswrong.com/lw/la/truly_part_of_you/">Less Wrong's “Truly Part of You”</a>)</em></p></blockquote>

<p>However, simply <em>using</em> open-source software does not give you an understanding
of its workings. It does not demystify it, it does not alleviate the <em>magic</em>
of the thing. In computer science especially, there is this concept of <a href="http://www.joelonsoftware.com/articles/LeakyAbstractions.html">leaky
abstractions</a>: these are most flagrant and disturbing when one has no or
little understanding of the abstracted layer.</p>

<p>This is why I make a point of reading through at least part of the source of
every program and library I work with on a regular basis. I have read a bit
of the Linux kernel, a small chunk of the Firefox OS UI, most of Sinatra but
much less of Rails, I have debugged and contributed to one of my systems'
package manager, and just this afternoon I trudged through a Gem to insert
a debug statement and peek within an HTTPS request.</p>

<p>All these experiences provided me with knowledge I could never get just by
reading documentation. This knowledge allows me the incredible power of
remixing various bits into new solutions. What's more, even though I have
cursed a bunch of developers while attempting to parse their witty one-liners,
I can hopefully learn from their mistakes and not just mine. Hmmm… <em>hopefully</em>.</p>
]]></content>
  </entry>
  
</feed>
